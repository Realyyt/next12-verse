-- Enable necessary extensions
create extension if not exists "uuid-ossp";

-- Ensure auth schema exists and has proper permissions
create schema if not exists auth;

-- Grant necessary permissions
grant usage on schema auth to postgres, anon, authenticated, service_role;
grant all on all tables in schema auth to postgres, anon, authenticated, service_role;
grant all on all sequences in schema auth to postgres, anon, authenticated, service_role;
grant all on all functions in schema auth to postgres, anon, authenticated, service_role;

-- Ensure auth.users table exists with proper structure
create table if not exists auth.users (
    id uuid primary key default uuid_generate_v4(),
    email text unique,
    encrypted_password text,
    email_confirmed_at timestamp with time zone,
    invited_at timestamp with time zone,
    confirmation_token text,
    confirmation_sent_at timestamp with time zone,
    recovery_token text,
    recovery_sent_at timestamp with time zone,
    email_change_token_new text,
    email_change text,
    email_change_sent_at timestamp with time zone,
    last_sign_in_at timestamp with time zone,
    raw_app_meta_data jsonb,
    raw_user_meta_data jsonb,
    is_super_admin boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    phone text unique,
    phone_confirmed_at timestamp with time zone,
    phone_change text,
    phone_change_token text,
    phone_change_sent_at timestamp with time zone,
    confirmed_at timestamp with time zone,
    email_change_token_current text,
    banned_until timestamp with time zone,
    reauthentication_token text,
    reauthentication_sent_at timestamp with time zone
);

-- Create trigger for updated_at
create or replace function auth.handle_updated_at()
returns trigger as $$
begin
    new.updated_at = timezone('utc'::text, now());
    return new;
end;
$$ language plpgsql security definer;

create trigger handle_users_updated_at
    before update on auth.users
    for each row
    execute function auth.handle_updated_at();

-- Ensure proper RLS policies
alter table auth.users enable row level security;

create policy "Users can view their own data"
    on auth.users for select
    using (auth.uid() = id);

create policy "Users can update their own data"
    on auth.users for update
    using (auth.uid() = id); 